const defaultFields = {
  type: '',
  language: '',
  keyword: '',
  lists: []
};

$(document).ready(function () {
  // fixes issue on laggy scrolling
  $("html").css('scroll-behavior', 'auto');

  let info = {
    ...defaultFields
  };

  const isLive = window.location.href.includes('https');
  const url = isLive ? 'https://node-openapi.herokuapp.com' : 'http://localhost:7000';

  const resultContainer = $('#result');
  const typeSubmitBtn = $('#btn-generate-type');
  const resultParContainer = $('#result-par');
  const outlineResultPar = $('#result-par-2');
  const parSubmitBtn = $('#btn-generate-par');
  const rangeValue = $('#rangeValue');
  const wordRange = $('#word-range');
  const parCon = $('#par-con');
  const copy = $('#copy');
  const copyBtn = $('#copy-btn');
  const body = $("html, body");
  const mixSubmitBtn = $('#btn-mix-generate-par');
  const mixContainer = $('#container-mix');
  const genFactsBtn = $('#btn-generate-facts');
  const typeChecked = $("input[name=type]");
  let textarea = document.querySelector(".resize-ta");
  const addFactBtn = $(".add-fact");
  const addOutlineFact = $("#outline-1-fact-1");

  const outlineFact = (outlineId, factId) => {
    return `
    <div class="row">
      <div class=" d-flex align-items-center outline-fact-container">
        <div class="col-sm-10">

            <div class="form-group p-2">
                <input type="text" class="form-control" id="outline-${outlineId}-fact-${factId}"
                    placeholder="Enter fact" name="keyword">
            </div>

        </div>
      </div>
    </div>
    `;
  }

  const populateOutlineFields = (index, outlineVal) => {
    console.log('[ OUTLINE VAL ]', outlineVal)
    return `
    <div class="col-sm pt-2 pb-2 outline-container" data-id="${index}">
      <div class="row">
        <div class=" d-flex align-items-center">

          <div class="col-sm-10">
            <div class="form-group p-2">
                <input 
                  type="text" 
                  class="form-control" 
                  id="outline-${index}" 
                  name="outline-${index}"
                  value="${outlineVal}"
                ">
            </div>
          </div>

          <div class="col-sm-2">
              <button type="submit" class="btn btn-primary add-fact">
                  <i class="fa fa-plus" aria-hidden="true"></i> Add fact
              </button>
          </div>

        </div>
      </div>
    </div>
   `;
  }

  const resetCopyBtn = () => {
    copyBtn.text('Copy to clipboard');
    copyBtn.addClass('btn-warning');
    copyBtn.removeClass('btn-success');
    copy.addClass('display-none');
    resultParContainer.addClass('display-none');
    return;
  };

  const doneCopy = () => {
    copyBtn.removeClass('btn-warning');
    copyBtn.addClass('btn-success');
    copyBtn.text('Copied to clipboard!');
    return;
  }

  const showMixBtn = () => {
    mixContainer.removeClass('display-none');
  }

  const hideMixBtn = () => {
    mixContainer.addClass('display-none');
  }

  const showFactsBtn = () => {
    genFactsBtn.removeClass('display-none');
  }

  const hideFactsBtn = () => {
    genFactsBtn.addClass('display-none');
  }

  const showResultCon = () => {
    resultContainer.removeClass('display-none');
  }

  const hideResultCon = () => {
    resultContainer.addClass('display-none');
  }

  const showParCon = () => {
    parCon.removeClass('display-none');
  }

  const hideParCon = () => {
    parCon.addClass('display-none');
  }

  const startTyping = (elem, txt) => {
    let i = 0;
    const speed = 0;

    function typeWriter() {
      if (i < txt.length) {
        const element = document.getElementById(elem)

        if (elem === 'result') {
          element.innerHTML += txt[i].replace("\n", "&#013;&#010;");
          textarea.style.height = calcHeight(textarea.value) + "px";
        } else {
          element.innerHTML += txt[i].replace("\n", "<br />");
        }

        i++;
        setTimeout(typeWriter, speed);
      }
      return
    }

    typeWriter()
    return;
  }

  $(document).on("click", ".add-fact", function () {

    // addFactBtn.on('click', 'body', function () {

    const that = $(this);
    const parentOutlineContainer = that.closest('.outline-container');
    const currFactOulineId = parseInt(parentOutlineContainer.attr('data-id'));
    const factId = $('.outline-fact-container').length + 1;


    console.log(currFactOulineId, factId);


    parentOutlineContainer.append(outlineFact(currFactOulineId, factId))


    // const parent = $(`#outline-${currFactOulineId}-fact-1`).closest('.outline-fact-container').clone()
  })

  typeChecked.on('change', function () {
    const val = $(this).val();
    console.log(val)

    switch (val) {
      case 'outline':
        resultContainer.empty()
        resultParContainer.empty()
        hideResultCon()
        hideFactsBtn()
        hideParCon()

        break;

      case 'facts':
        resultContainer.empty()
        resultParContainer.empty()
        hideResultCon()
        hideFactsBtn()
        hideParCon()

        break;

      default:
        break;
    }
  })


  $('#btn-generate-type').on('click', function (event) {
    event.preventDefault();
    resetCopyBtn();
    const type = $("input[name=type]:checked").val();
    const language = $("input[name=language]:checked").val();
    const keyword = $("#keyword").val().trim();
    let errMsg = '';

    resultContainer.empty();
    resultParContainer.empty();

    // console.log(type, language, keyword)

    if (!type?.length)
      errMsg = 'Please select type';

    if (!keyword.length)
      errMsg = 'Please enter a keyword(s)';

    if (errMsg.length) {
      alert(errMsg)
      return;
    }

    typeSubmitBtn.html('<i class="fa fa-spinner fa-spin"></i> Generating');

    const asyncPostCall = async () => {
      try {
        const response = await fetch(`${url}/api/v1/generate`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            type: type.trim(),
            language: language.trim(),
            keyword
          })
        });
        const data = await response.json();

        if (data.status === 'success') {
          console.log(data);

          info = {
            type: type.trim(),
            language: language.trim(),
            keyword,
            lists: [...data.data.lists]
          }

          console.log('Info > ', info)
          if (info.type !== 'facts') {
            resultContainer.removeClass('display-none');

            startTyping("result", data.data.result);

            typeSubmitBtn.find('i').remove();
            typeSubmitBtn.text('Generate again');
            parCon.removeClass('display-none');
          } else {
            let count = 0;
            for (const outline of info.lists) {
              console.log(outline)

              outlineResultPar.append(populateOutlineFields(count, `${outline.trim()}`))
              count++;
            }

            typeSubmitBtn.find('i').remove();
            typeSubmitBtn.text('Generate again');
            parCon.removeClass('display-none');
          }





          if (info.type === 'mix') {
            showMixBtn();
          } else {
            hideMixBtn();
          }

          // if (info.type === 'facts') {
          //   showFactsBtn();
          // } else {
          //   hideFactsBtn();
          // }
        }

      } catch (error) {
        console.log(error)
      }
    }

    asyncPostCall()
  });

  parSubmitBtn.on('click', function (event) {
    event.preventDefault();
    resetCopyBtn();
    resultParContainer.empty();

    const range = rangeValue.val();
    if (!parseInt(range)) {
      alert('Set maximum length!')
      return;
    }

    console.log('[Parag]', info)

    parSubmitBtn.html('<i class="fa fa-spinner fa-spin"></i> Generating paragraph');

    const asyncPostCall = async () => {
      try {
        const response = await fetch(`${url}/api/v1/generate/paragraph`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            ...info,
            range
          })
        });
        const data = await response.json();

        if (data.status === 'success') {
          // console.log(data);

          const html = data.data.reduce((p, c) => {
            if (c.topic) {
              p += (c.topic + "\n\n" + c.paragraph + "\n\n\n")
            }
            return p;
          }, ``);

          // console.log(html)

          resultParContainer.removeClass('display-none');
          startTyping("result-par", html);

          parSubmitBtn.find('i').remove();
          parSubmitBtn.text('Generate paragraph again');
          copy.removeClass('display-none');
          copyBtn.removeClass('display-none');
        }

      } catch (error) {
        console.log(error)
      }
    }

    asyncPostCall()

  });

  mixSubmitBtn.on('click', function (event) {
    event.preventDefault();
    resetCopyBtn();
    resultParContainer.empty();

    const range = rangeValue.val();
    if (!parseInt(range)) {
      alert('Set maximum length!')
      return;
    }

    parSubmitBtn.html('<i class="fa fa-spinner fa-spin"></i> Generating paragraph');

    const asyncPostCall = async () => {
      try {
        const response = await fetch(`${url}/api/v1/generate/paragraph`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            ...info,
            range
          })
        });
        const data = await response.json();

        if (data.status === 'success') {
          // console.log(data);

          const html = data.data.reduce((p, c) => {
            if (c.topic) {
              p += (c.topic + c.paragraph + "\n\n")
            }
            return p;
          }, ``);

          // console.log(html)

          resultParContainer.removeClass('display-none');
          startTyping("result-par", html);

          parSubmitBtn.find('i').remove();
          parSubmitBtn.text('Generate paragraph again');
          copy.removeClass('display-none');
          copyBtn.removeClass('display-none');
        }

      } catch (error) {
        console.log(error)
      }
    }

    asyncPostCall()

  });

  wordRange.on('change, mousemove', function () {
    const elem = $(this).val();
    rangeValue.val(parseInt(elem))
  });

  rangeValue.on('change, keyup', function () {
    const elem = $(this).val();
    wordRange.val(parseInt(elem))
  });

  copy.on('click', function () {
    const $temp = $("<textarea>");
    const brRegex = /<br\s*[\/]?>/gi;
    $("body").append($temp);
    $temp.val($('#result-par').html().replace(brRegex, "\r\n")).select();
    document.execCommand("copy");
    $temp.remove();

    doneCopy();
  })


  window.scrollTo(0, 0);


  // Dealing with Textarea Height
  function calcHeight(value) {
    let numberOfLineBreaks = (value.match(/\n/g) || []).length + 2;
    // min-height + lines x line-height + padding + border
    let newHeight = 20 + numberOfLineBreaks * 20 + 12 + 2;

    // console.log(value, numberOfLineBreaks, newHeight)
    return newHeight;
  }

  resultContainer.on('keyup', function () {
    const val = $(this).val();
    const res = val.split("\n").map(x => x.trim()).filter(x => x !== '');
    info.lists = [...res];
  })

  /**
   * Notes:
   * <span id="rangeValue">0</span>
   * rangeValue.innerHTML = elem;
   */

});